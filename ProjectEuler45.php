<?php

/**
 *
 * Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
 *
 * Triangle	 		Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
 * Pentagonal	 	Pn=n(3n−1)/2	1, 5, 12, 22, 35, ...
 * Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
 *
 * It can be verified that T285 = P165 = H143 = 40755.
 *
 * Find the next triangle number that is also pentagonal and hexagonal.
 *
 */

ini_set('memory_limit', '1G');
require_once(dirname(__FILE__).'/HelperFunctions.php');


function isPantagonal($x)
{
	/*
	 * x = n(3n - 1)/2
	 * 2x = 3n^2 - n
	 * 2x + 1/12 = 3n^2 - n + 1/12
	 * 1/12(24x + 1) = 3(n2 - n/3 + 1/36)
	 * 1/36 (24x + 1) = (n – 1/6)^2
	 * 1/6(sqrt(24x + 1) = n - 1/6
	 * 1/6(sqrt(24x + 1)) + 1/6 = n
	 *
	 * n = 1/6((sqrt(24x + 1) + 1)
	 *
	 * */

	$n = 1/6*(sqrt(24*$x + 1) + 1);
	return intval($n*100) - $n*100 == 0;
}

function isHexagonal($x)
{
	/*
	 * x  = n(2n - 1)
	 * x  = 2n^2 - n
	 * x + 1/8 = 2n^2 - n + 1/8
	 * 1/8(8x + 1) = 2(n^2 - n/2 + 1/16)
	 * 1/16 (8x + 1) = (n – 1/4)^2
	 * 1/4 (sqrt(8x+1)) = n - 1/4
	 * 1/4 (sqrt(8x+1)) + 1/4 = n
	 *
	 * n = 1/4(sqrt(8x + 1) + 1)
	 *
	 * */

	$n = 1/4*(sqrt(8*$x + 1) + 1);
	// var_dump($n);
	return intval($n*100) - $n*100 == 0;
}

function findTPHNumber($start = 1)
{
	$number = $start;
	$found = false;
	// all hexagonal are triangle numbers, so no need to check if the nuber is triangle
	while (!$found) {
		$number++;
		if (isPantagonal($number) && isHexagonal($number)) {
			$found = true;
		}
	}
	return $number;
}

function getHexagonal($n)
{
	return 2*$n*$n - $n;
}


function findTPHNumber2($start = 1)
{
	// all hexagonal are triangle numbers, so no need to check if the nuber is triangle
	$number = $start;
	$found = false;
	while (!$found) {
		$number++;
		$hex = getHexagonal($number);
		if (isPantagonal($hex)) {
			$found = true;
		}
	}
	return $hex;
}


echo "\nThe next triangle number after 285 that is also pentagonal and hexagonal:\n";

$start = microtime(true);
$ans = findTPHNumber(40755);
$end = microtime(true);
$time = number_format($end - $start, 15);

echo "\nBrute Force Method";
echo "\nAns\t: $ans";
echo "\nTime\t: $time\n\n";

$start = microtime(true);
$ans = findTPHNumber2(143);
$end = microtime(true);
$time = number_format($end - $start, 15);

echo "\nSmart Method";
echo "\nAns\t: $ans";
echo "\nTime\t: $time\n\n";
